/*
  Basic logic cells for a logic family based on discrete ltlos transistors (ltlos Logic)
  BUF

Logic gates:
  NOT
  NAND2
  NAND3
  NOR2
  NOR3
  AOI2_2

D-Flop:
  DFF
*/


library(SingleLogicCells) {
  
  cell(ltl_BUF) {
    area: 6;
    pin(A) { direction: input; }
    pin(Y) { direction: output;
              function: "A"; }
  }
  
  cell(ltl_NOT) {
    area: 2;
    pin(A) { direction: input; }
    pin(Y) { direction: output;
              function: "A'"; }
  }


  cell(ltl_NAND2) {
    area: 2;
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(Y) { direction: output;
             function: "(A*B)'"; }
  }

  cell(ltl_NAND3) {
    area: 2;
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(C) { direction: input; }
    pin(Y) { direction: output;
             function: "(A*B*C)'"; }
  }

cell(ltl_NAND4) {
    area: 2;
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(C) { direction: input; }
    pin(Y) { direction: output;
             function: "(A*B*C)'"; }
  }

/*
  cell(ltl_AOI2_2) {
    area: 4;
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(C) { direction: input; }
    pin(D) { direction: input; }
    pin(Y) { direction: output;
             function: "((A*B)+(C*D))'"; }
  }

cell(ltl_AOI1_2) {
    area: 4;
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(C) { direction: input; }
    pin(Y) { direction: output;
             function: "(A+(B*C))'"; }
  }

cell(ltl_AOI2_2_2) {
    area: 6;
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(C) { direction: input; }
    pin(D) { direction: input; }
    pin(E) { direction: input; }
    pin(F) { direction: input; }
    pin(Y) { direction: output;
             function: "((A*B)+(C*D)+(E*F))'"; }
  }
  */
/*
cell(ltl_NOR2) {
    area: 4;
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(Y) { direction: output;
             function: "(A+B)'"; }
  }

  cell(ltl_NOR3) {
    area: 6;
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(C) { direction: input; }
    pin(Y) { direction: output;
             function: "(A+B+C)'"; }
  }
*/

/*
  cell(ltl_DFF) {
    area: 12;
    ff(IQ, IQN) { clocked_on: C;
                  next_state: D; }
    pin(C) { direction: input;
                 clock: true; }
    pin(D) { direction: input; }
    pin(Q) { direction: output;
              function: "IQ"; }
   }
  }
*/
  cell(ltl_DFFNP) {
    area: 12;
    ff(IQ, IQN) { clocked_on: C;
                  next_state: D; }
    pin(C) { direction: input;
                 clock: true; }
    pin(D) { direction: input; }
    pin(Q) { direction: output;
              function: "IQ"; }
    pin(QN) { direction: output;
              function: "IQN"; }
   }
  
    cell(ltl_DFFNP_CLR) {
    area: 12;
    ff(IQ, IQN) { clocked_on: C;
                  next_state: D; 
                  clear:      "CD'";}
    pin(C) { direction: input;
                 clock: true; }
    pin(D) { direction: input; }
    pin(CD) { direction: input; }    
    pin(Q) { direction: output;
              function: "IQ"; }
    pin(QN) { direction: output;
              function: "IQN"; }
   }
  
/*
  cell(lvc_DFF) {
    area: 1;
    ff(IQ, IQN) { clocked_on: C;
                  next_state: D; }
    pin(C) { direction: input;
                 clock: true; }
    pin(D) { direction: input; }
    pin(Q) { direction: output;
              function: "IQ"; }
  }
    cell(lvc_DFF_clear) {
    area: 1;
    ff(IQ, IQN) { clocked_on: C;
                  next_state: D; 
                  clear:      "CD'";}
    pin(C) { direction: input;
                 clock: true; }
    pin(D) { direction: input; }
    pin(CD) { direction: input; }
    pin(Q) { direction: output;
              function: "IQ"; }
  }
  */
  
}
